package com.bbh.star.clientcenter.aspects;

import static org.apache.commons.lang3.ObjectUtils.allNotNull;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StopWatch;

import com.bbh.star.clientcenter.util.logging.AspectLogger;

@Aspect
@Component
public class RestServiceLoggerAspect {
	private static final Logger log = LoggerFactory.getLogger(RestServiceLoggerAspect.class);

	@Autowired
	private AspectLogger aspectLogger;

	@Around("execution(* com.rest.*.*(..))")
	public Object aroundSampleCreation(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
		Object result = null;
		StopWatch watch = new StopWatch();

		try {
			watch.start();
			result = proceedingJoinPoint.proceed();
			return result;
		} finally {
			watch.stop();
			log(proceedingJoinPoint.getTarget(), proceedingJoinPoint.getSignature(), watch.getTotalTimeMillis());
		}
	}

	private void log(Object target, Signature signature, long time) {
		if (allNotNull(target, signature)) {
			StringBuilder message = new StringBuilder().append("Invoked service[")
					.append(target.getClass().getSimpleName())
					.append(".")
					.append(signature.getName() + "]")
					.append(" took " + time + "ms");

			aspectLogger.logMessage(log, message.toString());
		}
	}
}
